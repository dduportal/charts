def credentialPerCluster = [
  cik8s: "eks-ci-1-kubeconfig"
]

pipeline {
  agent {
    kubernetes {
      label 'helmfile'
      yamlFile 'PodTemplates.yaml'
      inheritFrom 'jnlp-linux'
    }
  }
  environment {
    AZURE_TENANT_ID       = credentials('sops-tenant-id')
    AZURE_CLIENT_ID       = credentials('sops-client-id')
    AZURE_CLIENT_SECRET   = credentials('sops-client-secret')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  triggers {
    cron(env.BRANCH_NAME == 'master' ? 'H/30 * * * *' : '')
  }

  stages {
    stage('Parallel Stages') {
      parallel {
        stage('updatecli tasks') {
          stage('Check Configuration Update') {
            when {
              allOf {
                branch 'master'
                // Only run updateCli's tasks when the pipeline is triggered by the "cron" routine
                triggeredBy 'TimerTrigger'
              }
            } // stage
            environment {
              UPDATECLI_GITHUB_TOKEN  = credentials('updatecli-github-token')
            }
            steps {
              container('updatecli') {
                sh 'updatecli diff --config ./updateCli/updateCli.d --values ./updateCli/values.yaml'
              }
            }
          } // stage
          stage('Apply Configuration Update') {
            when {
              allOf {
                branch 'master'
                // Only run updateCli's tasks when the pipeline is triggered by the "cron" routine
                triggeredBy 'TimerTrigger'
              }
            }
            environment {
              UPDATECLI_GITHUB_TOKEN  = credentials('updatecli-github-token')
            }
            steps {
              container('updatecli') {
                sh 'updatecli apply --config ./updateCli/updateCli.d --values ./updateCli/values.yaml'
              }
            }
          } // stage
        } // stage
        stage('Yaml Lint') {
          steps {
            container('yamllint') {
              sh 'yamllint --config-file yamllint.config config/'
            }
          }
        } // stage
        stage('Init Secrets') {
          steps {
            container('jnlp') {
              dir ('secrets'){
                git branch: 'master', credentialsId: 'charts-secrets', url: 'git@github.com:jenkins-infra/charts-secrets.git'
              }
            }
          }
        } // stage
      } // parallel
    }
    stage('Helmfile Operations') {
      matrix {
        axes {
          axis {
            name 'K8S_CLUSTER'
            values 'publick8s', 'cik8s'
          }
        }
        environment {
          KUBECONFIG = "${credentialPerCluster.containsKey(K8S_CLUSTER) ? credentials(credentialPerCluster[K8S_CLUSTER]) : '' }"
        }
        stages {
          stage('Prepare Environment'){
            steps {
              container('helmfile'){
                sh 'mkdir -p $HOME $HOME/.config'
              }
            }
          }
          stage('Test Lint'){
            steps {
              container('helmfile'){
                sh 'helmfile -f "clusters/${K8S_CLUSTER}.yaml" lint'
              }
            }
          } // stage
          stage('Diff on Main Branch'){
            when { branch 'master' }
            steps {
              container('helmfile'){
                sh 'helmfile -f "clusters/${K8S_CLUSTER}.yaml" diff --suppress-secrets'
              }
            }
          } // stage
          stage('Diff on PR'){
            when { changeRequest() }
            steps {
              container('helmfile'){
                script {
                  def diff = sh(script:'helmfile --no-color -f "clusters/${K8S_CLUSTER}.yaml" diff --suppress-secrets --skip-deps', returnStdout: true).trim()
                  pullRequest.comment('<details><summary>Helmfile Diff</summary>\n\n```diff\n' + diff + '\n```\n\n</details>') // In GitHub flavored markdown, and empty line is required around the code block triple backticks
                }
              }
            }
          } // stage
          stage('Apply'){
            when { branch 'master' }
            steps {
              container('helmfile'){
                sh 'helmfile -f "clusters/${K8S_CLUSTER}.yaml" apply --suppress-secrets'
              }
            }
          } // stage
        } // stages
      } // matrix
    } // stage
  }
}
